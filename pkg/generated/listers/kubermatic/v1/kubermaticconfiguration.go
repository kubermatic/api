/*
Copyright 2023 The Kubermatic Kubernetes Platform contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8c.io/api/v2/pkg/apis/kubermatic/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubermaticConfigurationLister helps list KubermaticConfigurations.
// All objects returned here must be treated as read-only.
type KubermaticConfigurationLister interface {
	// List lists all KubermaticConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubermaticConfiguration, err error)
	// KubermaticConfigurations returns an object that can list and get KubermaticConfigurations.
	KubermaticConfigurations(namespace string) KubermaticConfigurationNamespaceLister
	KubermaticConfigurationListerExpansion
}

// kubermaticConfigurationLister implements the KubermaticConfigurationLister interface.
type kubermaticConfigurationLister struct {
	indexer cache.Indexer
}

// NewKubermaticConfigurationLister returns a new KubermaticConfigurationLister.
func NewKubermaticConfigurationLister(indexer cache.Indexer) KubermaticConfigurationLister {
	return &kubermaticConfigurationLister{indexer: indexer}
}

// List lists all KubermaticConfigurations in the indexer.
func (s *kubermaticConfigurationLister) List(selector labels.Selector) (ret []*v1.KubermaticConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubermaticConfiguration))
	})
	return ret, err
}

// KubermaticConfigurations returns an object that can list and get KubermaticConfigurations.
func (s *kubermaticConfigurationLister) KubermaticConfigurations(namespace string) KubermaticConfigurationNamespaceLister {
	return kubermaticConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubermaticConfigurationNamespaceLister helps list and get KubermaticConfigurations.
// All objects returned here must be treated as read-only.
type KubermaticConfigurationNamespaceLister interface {
	// List lists all KubermaticConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubermaticConfiguration, err error)
	// Get retrieves the KubermaticConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.KubermaticConfiguration, error)
	KubermaticConfigurationNamespaceListerExpansion
}

// kubermaticConfigurationNamespaceLister implements the KubermaticConfigurationNamespaceLister
// interface.
type kubermaticConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubermaticConfigurations in the indexer for a given namespace.
func (s kubermaticConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1.KubermaticConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubermaticConfiguration))
	})
	return ret, err
}

// Get retrieves the KubermaticConfiguration from the indexer for a given namespace and name.
func (s kubermaticConfigurationNamespaceLister) Get(name string) (*v1.KubermaticConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("kubermaticconfiguration"), name)
	}
	return obj.(*v1.KubermaticConfiguration), nil
}
