/*
Copyright 2023 The Kubermatic Kubernetes Platform contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8c.io/api/v2/pkg/apis/kubermatic/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserSSHKeyLister helps list UserSSHKeys.
// All objects returned here must be treated as read-only.
type UserSSHKeyLister interface {
	// List lists all UserSSHKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.UserSSHKey, err error)
	// UserSSHKeys returns an object that can list and get UserSSHKeys.
	UserSSHKeys(namespace string) UserSSHKeyNamespaceLister
	UserSSHKeyListerExpansion
}

// userSSHKeyLister implements the UserSSHKeyLister interface.
type userSSHKeyLister struct {
	indexer cache.Indexer
}

// NewUserSSHKeyLister returns a new UserSSHKeyLister.
func NewUserSSHKeyLister(indexer cache.Indexer) UserSSHKeyLister {
	return &userSSHKeyLister{indexer: indexer}
}

// List lists all UserSSHKeys in the indexer.
func (s *userSSHKeyLister) List(selector labels.Selector) (ret []*v1.UserSSHKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.UserSSHKey))
	})
	return ret, err
}

// UserSSHKeys returns an object that can list and get UserSSHKeys.
func (s *userSSHKeyLister) UserSSHKeys(namespace string) UserSSHKeyNamespaceLister {
	return userSSHKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserSSHKeyNamespaceLister helps list and get UserSSHKeys.
// All objects returned here must be treated as read-only.
type UserSSHKeyNamespaceLister interface {
	// List lists all UserSSHKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.UserSSHKey, err error)
	// Get retrieves the UserSSHKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.UserSSHKey, error)
	UserSSHKeyNamespaceListerExpansion
}

// userSSHKeyNamespaceLister implements the UserSSHKeyNamespaceLister
// interface.
type userSSHKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserSSHKeys in the indexer for a given namespace.
func (s userSSHKeyNamespaceLister) List(selector labels.Selector) (ret []*v1.UserSSHKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.UserSSHKey))
	})
	return ret, err
}

// Get retrieves the UserSSHKey from the indexer for a given namespace and name.
func (s userSSHKeyNamespaceLister) Get(name string) (*v1.UserSSHKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("usersshkey"), name)
	}
	return obj.(*v1.UserSSHKey), nil
}
