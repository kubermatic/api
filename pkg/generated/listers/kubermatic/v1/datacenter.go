// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8c.io/api/v3/pkg/apis/kubermatic/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatacenterLister helps list Datacenters.
// All objects returned here must be treated as read-only.
type DatacenterLister interface {
	// List lists all Datacenters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Datacenter, err error)
	// Datacenters returns an object that can list and get Datacenters.
	Datacenters(namespace string) DatacenterNamespaceLister
	DatacenterListerExpansion
}

// datacenterLister implements the DatacenterLister interface.
type datacenterLister struct {
	indexer cache.Indexer
}

// NewDatacenterLister returns a new DatacenterLister.
func NewDatacenterLister(indexer cache.Indexer) DatacenterLister {
	return &datacenterLister{indexer: indexer}
}

// List lists all Datacenters in the indexer.
func (s *datacenterLister) List(selector labels.Selector) (ret []*v1.Datacenter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Datacenter))
	})
	return ret, err
}

// Datacenters returns an object that can list and get Datacenters.
func (s *datacenterLister) Datacenters(namespace string) DatacenterNamespaceLister {
	return datacenterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatacenterNamespaceLister helps list and get Datacenters.
// All objects returned here must be treated as read-only.
type DatacenterNamespaceLister interface {
	// List lists all Datacenters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Datacenter, err error)
	// Get retrieves the Datacenter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Datacenter, error)
	DatacenterNamespaceListerExpansion
}

// datacenterNamespaceLister implements the DatacenterNamespaceLister
// interface.
type datacenterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Datacenters in the indexer for a given namespace.
func (s datacenterNamespaceLister) List(selector labels.Selector) (ret []*v1.Datacenter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Datacenter))
	})
	return ret, err
}

// Get retrieves the Datacenter from the indexer for a given namespace and name.
func (s datacenterNamespaceLister) Get(name string) (*v1.Datacenter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("datacenter"), name)
	}
	return obj.(*v1.Datacenter), nil
}
