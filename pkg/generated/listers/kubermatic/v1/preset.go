// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8c.io/api/v3/pkg/apis/kubermatic/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PresetLister helps list Presets.
// All objects returned here must be treated as read-only.
type PresetLister interface {
	// List lists all Presets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Preset, err error)
	// Presets returns an object that can list and get Presets.
	Presets(namespace string) PresetNamespaceLister
	PresetListerExpansion
}

// presetLister implements the PresetLister interface.
type presetLister struct {
	indexer cache.Indexer
}

// NewPresetLister returns a new PresetLister.
func NewPresetLister(indexer cache.Indexer) PresetLister {
	return &presetLister{indexer: indexer}
}

// List lists all Presets in the indexer.
func (s *presetLister) List(selector labels.Selector) (ret []*v1.Preset, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Preset))
	})
	return ret, err
}

// Presets returns an object that can list and get Presets.
func (s *presetLister) Presets(namespace string) PresetNamespaceLister {
	return presetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PresetNamespaceLister helps list and get Presets.
// All objects returned here must be treated as read-only.
type PresetNamespaceLister interface {
	// List lists all Presets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Preset, err error)
	// Get retrieves the Preset from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Preset, error)
	PresetNamespaceListerExpansion
}

// presetNamespaceLister implements the PresetNamespaceLister
// interface.
type presetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Presets in the indexer for a given namespace.
func (s presetNamespaceLister) List(selector labels.Selector) (ret []*v1.Preset, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Preset))
	})
	return ret, err
}

// Get retrieves the Preset from the indexer for a given namespace and name.
func (s presetNamespaceLister) Get(name string) (*v1.Preset, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("preset"), name)
	}
	return obj.(*v1.Preset), nil
}
