/*
Copyright 2023 The Kubermatic Kubernetes Platform contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8c.io/api/v2/pkg/apis/kubermatic/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IPAMAllocationLister helps list IPAMAllocations.
// All objects returned here must be treated as read-only.
type IPAMAllocationLister interface {
	// List lists all IPAMAllocations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.IPAMAllocation, err error)
	// IPAMAllocations returns an object that can list and get IPAMAllocations.
	IPAMAllocations(namespace string) IPAMAllocationNamespaceLister
	IPAMAllocationListerExpansion
}

// iPAMAllocationLister implements the IPAMAllocationLister interface.
type iPAMAllocationLister struct {
	indexer cache.Indexer
}

// NewIPAMAllocationLister returns a new IPAMAllocationLister.
func NewIPAMAllocationLister(indexer cache.Indexer) IPAMAllocationLister {
	return &iPAMAllocationLister{indexer: indexer}
}

// List lists all IPAMAllocations in the indexer.
func (s *iPAMAllocationLister) List(selector labels.Selector) (ret []*v1.IPAMAllocation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.IPAMAllocation))
	})
	return ret, err
}

// IPAMAllocations returns an object that can list and get IPAMAllocations.
func (s *iPAMAllocationLister) IPAMAllocations(namespace string) IPAMAllocationNamespaceLister {
	return iPAMAllocationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IPAMAllocationNamespaceLister helps list and get IPAMAllocations.
// All objects returned here must be treated as read-only.
type IPAMAllocationNamespaceLister interface {
	// List lists all IPAMAllocations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.IPAMAllocation, err error)
	// Get retrieves the IPAMAllocation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.IPAMAllocation, error)
	IPAMAllocationNamespaceListerExpansion
}

// iPAMAllocationNamespaceLister implements the IPAMAllocationNamespaceLister
// interface.
type iPAMAllocationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IPAMAllocations in the indexer for a given namespace.
func (s iPAMAllocationNamespaceLister) List(selector labels.Selector) (ret []*v1.IPAMAllocation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.IPAMAllocation))
	})
	return ret, err
}

// Get retrieves the IPAMAllocation from the indexer for a given namespace and name.
func (s iPAMAllocationNamespaceLister) Get(name string) (*v1.IPAMAllocation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("ipamallocation"), name)
	}
	return obj.(*v1.IPAMAllocation), nil
}
