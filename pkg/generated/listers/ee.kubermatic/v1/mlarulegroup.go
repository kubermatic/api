// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8c.io/api/v3/pkg/apis/ee.kubermatic/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MLARuleGroupLister helps list MLARuleGroups.
// All objects returned here must be treated as read-only.
type MLARuleGroupLister interface {
	// List lists all MLARuleGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.MLARuleGroup, err error)
	// MLARuleGroups returns an object that can list and get MLARuleGroups.
	MLARuleGroups(namespace string) MLARuleGroupNamespaceLister
	MLARuleGroupListerExpansion
}

// mLARuleGroupLister implements the MLARuleGroupLister interface.
type mLARuleGroupLister struct {
	indexer cache.Indexer
}

// NewMLARuleGroupLister returns a new MLARuleGroupLister.
func NewMLARuleGroupLister(indexer cache.Indexer) MLARuleGroupLister {
	return &mLARuleGroupLister{indexer: indexer}
}

// List lists all MLARuleGroups in the indexer.
func (s *mLARuleGroupLister) List(selector labels.Selector) (ret []*v1.MLARuleGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MLARuleGroup))
	})
	return ret, err
}

// MLARuleGroups returns an object that can list and get MLARuleGroups.
func (s *mLARuleGroupLister) MLARuleGroups(namespace string) MLARuleGroupNamespaceLister {
	return mLARuleGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MLARuleGroupNamespaceLister helps list and get MLARuleGroups.
// All objects returned here must be treated as read-only.
type MLARuleGroupNamespaceLister interface {
	// List lists all MLARuleGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.MLARuleGroup, err error)
	// Get retrieves the MLARuleGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.MLARuleGroup, error)
	MLARuleGroupNamespaceListerExpansion
}

// mLARuleGroupNamespaceLister implements the MLARuleGroupNamespaceLister
// interface.
type mLARuleGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MLARuleGroups in the indexer for a given namespace.
func (s mLARuleGroupNamespaceLister) List(selector labels.Selector) (ret []*v1.MLARuleGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MLARuleGroup))
	})
	return ret, err
}

// Get retrieves the MLARuleGroup from the indexer for a given namespace and name.
func (s mLARuleGroupNamespaceLister) Get(name string) (*v1.MLARuleGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("mlarulegroup"), name)
	}
	return obj.(*v1.MLARuleGroup), nil
}
