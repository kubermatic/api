// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8c.io/api/v3/pkg/apis/ee.kubermatic/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MLAClusterConfigurationLister helps list MLAClusterConfigurations.
// All objects returned here must be treated as read-only.
type MLAClusterConfigurationLister interface {
	// List lists all MLAClusterConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.MLAClusterConfiguration, err error)
	// MLAClusterConfigurations returns an object that can list and get MLAClusterConfigurations.
	MLAClusterConfigurations(namespace string) MLAClusterConfigurationNamespaceLister
	MLAClusterConfigurationListerExpansion
}

// mLAClusterConfigurationLister implements the MLAClusterConfigurationLister interface.
type mLAClusterConfigurationLister struct {
	indexer cache.Indexer
}

// NewMLAClusterConfigurationLister returns a new MLAClusterConfigurationLister.
func NewMLAClusterConfigurationLister(indexer cache.Indexer) MLAClusterConfigurationLister {
	return &mLAClusterConfigurationLister{indexer: indexer}
}

// List lists all MLAClusterConfigurations in the indexer.
func (s *mLAClusterConfigurationLister) List(selector labels.Selector) (ret []*v1.MLAClusterConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MLAClusterConfiguration))
	})
	return ret, err
}

// MLAClusterConfigurations returns an object that can list and get MLAClusterConfigurations.
func (s *mLAClusterConfigurationLister) MLAClusterConfigurations(namespace string) MLAClusterConfigurationNamespaceLister {
	return mLAClusterConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MLAClusterConfigurationNamespaceLister helps list and get MLAClusterConfigurations.
// All objects returned here must be treated as read-only.
type MLAClusterConfigurationNamespaceLister interface {
	// List lists all MLAClusterConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.MLAClusterConfiguration, err error)
	// Get retrieves the MLAClusterConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.MLAClusterConfiguration, error)
	MLAClusterConfigurationNamespaceListerExpansion
}

// mLAClusterConfigurationNamespaceLister implements the MLAClusterConfigurationNamespaceLister
// interface.
type mLAClusterConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MLAClusterConfigurations in the indexer for a given namespace.
func (s mLAClusterConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1.MLAClusterConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MLAClusterConfiguration))
	})
	return ret, err
}

// Get retrieves the MLAClusterConfiguration from the indexer for a given namespace and name.
func (s mLAClusterConfigurationNamespaceLister) Get(name string) (*v1.MLAClusterConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("mlaclusterconfiguration"), name)
	}
	return obj.(*v1.MLAClusterConfiguration), nil
}
