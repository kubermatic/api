// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	kubermaticv1 "k8c.io/api/v2/pkg/apis/kubermatic/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeGroupProjectBindings implements GroupProjectBindingInterface
type FakeGroupProjectBindings struct {
	Fake *FakeKubermaticV1
	ns   string
}

var groupprojectbindingsResource = schema.GroupVersionResource{Group: "kubermatic.k8c.io", Version: "v1", Resource: "groupprojectbindings"}

var groupprojectbindingsKind = schema.GroupVersionKind{Group: "kubermatic.k8c.io", Version: "v1", Kind: "GroupProjectBinding"}

// Get takes name of the groupProjectBinding, and returns the corresponding groupProjectBinding object, and an error if there is any.
func (c *FakeGroupProjectBindings) Get(ctx context.Context, name string, options v1.GetOptions) (result *kubermaticv1.GroupProjectBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(groupprojectbindingsResource, c.ns, name), &kubermaticv1.GroupProjectBinding{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubermaticv1.GroupProjectBinding), err
}

// List takes label and field selectors, and returns the list of GroupProjectBindings that match those selectors.
func (c *FakeGroupProjectBindings) List(ctx context.Context, opts v1.ListOptions) (result *kubermaticv1.GroupProjectBindingList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(groupprojectbindingsResource, groupprojectbindingsKind, c.ns, opts), &kubermaticv1.GroupProjectBindingList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &kubermaticv1.GroupProjectBindingList{ListMeta: obj.(*kubermaticv1.GroupProjectBindingList).ListMeta}
	for _, item := range obj.(*kubermaticv1.GroupProjectBindingList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested groupProjectBindings.
func (c *FakeGroupProjectBindings) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(groupprojectbindingsResource, c.ns, opts))

}

// Create takes the representation of a groupProjectBinding and creates it.  Returns the server's representation of the groupProjectBinding, and an error, if there is any.
func (c *FakeGroupProjectBindings) Create(ctx context.Context, groupProjectBinding *kubermaticv1.GroupProjectBinding, opts v1.CreateOptions) (result *kubermaticv1.GroupProjectBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(groupprojectbindingsResource, c.ns, groupProjectBinding), &kubermaticv1.GroupProjectBinding{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubermaticv1.GroupProjectBinding), err
}

// Update takes the representation of a groupProjectBinding and updates it. Returns the server's representation of the groupProjectBinding, and an error, if there is any.
func (c *FakeGroupProjectBindings) Update(ctx context.Context, groupProjectBinding *kubermaticv1.GroupProjectBinding, opts v1.UpdateOptions) (result *kubermaticv1.GroupProjectBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(groupprojectbindingsResource, c.ns, groupProjectBinding), &kubermaticv1.GroupProjectBinding{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubermaticv1.GroupProjectBinding), err
}

// Delete takes name of the groupProjectBinding and deletes it. Returns an error if one occurs.
func (c *FakeGroupProjectBindings) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(groupprojectbindingsResource, c.ns, name, opts), &kubermaticv1.GroupProjectBinding{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeGroupProjectBindings) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(groupprojectbindingsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &kubermaticv1.GroupProjectBindingList{})
	return err
}

// Patch applies the patch and returns the patched groupProjectBinding.
func (c *FakeGroupProjectBindings) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *kubermaticv1.GroupProjectBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(groupprojectbindingsResource, c.ns, name, pt, data, subresources...), &kubermaticv1.GroupProjectBinding{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kubermaticv1.GroupProjectBinding), err
}
