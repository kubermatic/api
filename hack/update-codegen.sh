#!/usr/bin/env bash

# Copyright 2023 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -euo pipefail

cd $(dirname $0)/..
source hack/lib.sh

CRD_DIR=crd
CODEGEN_DIR=pkg/generated

echodate "Removing old generated clients"
rm -rf "$CODEGEN_DIR"

echodate "Creating vendor directory"
go mod vendor

echodate "Generating Kubernetes clientset"

echo "" > /tmp/headerfile

# no deepcopy here, as controller-gen takes care of that
bash vendor/k8s.io/code-generator/generate-groups.sh client,lister,informer \
  k8c.io/api/v3/$CODEGEN_DIR \
  k8c.io/api/v3/pkg/apis \
  "kubermatic:v1 ee.kubermatic:v1 apps.kubermatic:v1 ee.apps.kubermatic:v1" \
  --go-header-file /tmp/headerfile

# move generated code to the correct location; this should work regardless where
# this repository has been cloned to
mv $GOPATH/src/k8c.io/api/v3/pkg/generated pkg/

# in case the repository was cloned to the module path in $GOPATH, make sure to
# remove the leftover v3 directory
rm -rf v3

# cleanup
rm -rf vendor

# generate CRDs from the Go types
echodate "Generating CRDs"

go run sigs.k8s.io/controller-tools/cmd/controller-gen \
  crd \
  "object:headerFile=./hack/boilerplate/ce/boilerplate.go.txt" \
  "paths=./pkg/apis/..." \
  "output:crd:dir=$CRD_DIR"

# beautify CRDs just because we can
for f in $CRD_DIR/*.yaml; do
  yq --inplace --no-doc 'del(.metadata.creationTimestamp)' "$f"
  mv "$f" "$f.bak"
  echo -e "# This file has been generated by hack/update-codegen.sh, DO NOT EDIT.\n" > "$f"
  cat "$f.bak" >> "$f"
  rm "$f.bak"
done

is_enterprise_extension() {
  # yq's `contains` function is weird, this is safer
  # https://mikefarah.gitbook.io/yq/operators/contains
  yq --exit-status '[.spec.names.categories[] | select(. == "kkpee")] | length == 1' "$1" 2>/dev/null
}

# create pre-configured collections of CRDs to make installation easier
prepare_crd_set() {
  setName="$1"
  echodate "Preparing $setName CRD set"
  target="$CRD_DIR/$setName"

  rm -rf "$target"
  mkdir -p "$target"
}

(
  prepare_crd_set community
  target="$CRD_DIR/$setName"

  for f in $CRD_DIR/kubermatic.k8c.io_*.yaml; do
    if ! $(is_enterprise_extension "$f"); then
      cp "$f" "$target/"
    fi
  done
)

(
  prepare_crd_set enterprise/seed
  target="$CRD_DIR/$setName"

  cp $CRD_DIR/kubermatic.k8c.io_*.yaml "$target/"
)

(
  prepare_crd_set enterprise/kcp
  target="$CRD_DIR/$setName"

  cp $CRD_DIR/ee.kubermatic.k8c.io_*.yaml "$target/"
  cp $CRD_DIR/ee.apps.kubermatic.k8c.io_*.yaml "$target/"
)

rm $CRD_DIR/*.yaml
